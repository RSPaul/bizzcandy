var express = require('express');
var path = require('path');
var mongoose = require('mongoose');
var config = require('./config/database');
var fs = require('fs');

// Connect to db
mongoose.connect(config.database, { useNewUrlParser: true });
//mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost/cmscart');
var db = mongoose.connection;
db.on('error', console.error.bind(console, 'connection error:'));
db.once('open', function () {
    console.log('Connected to MongoDB');
});


// Init app
var app = express();



var Product = require('./models/product');

//update ware houses for products
// app.get('/w/:brand', function (req, res) {
//       var brand = req.params.brand; 
//       Product.find({brand: {$ne: "jelly-belly"}}, function(err, products) {
//         // console.log('products ', products , products.length);
//         products.map(product => {
//           updateProduct(product, brand, function (err, updated) {
//             if(err) console.log('not updated', product.slug);
//             else console.log('updated', product.slug);
//           });
//         });
//       });
//   res.send('done');
// });

function updateProduct(product, brand, callback) {
  product.warehouse = brand;
  product.save(function (err, saved) {
    // console.log('err, saved ', err, saved);
    callback(err, saved)
  });
}

// app.get('/', function (req, res) {
//       var foundCounter = 0;
//       var notFoundCounter = 0;
//       const jsonFilePath=path.resolve(__dirname, 'orders/missingCodes.json');
//       var jsonObj = JSON.parse(fs.readFileSync(jsonFilePath, 'utf8'));
//           jsonObj.map(obj => {
//             updateCode(obj, function (err, found) {
//               console.log('==> found ', found , '\n');
//               if(found) {
//                 found.product_code = obj.ProductCode;
//                 found.save();
//                 foundCounter++;
//               } else {
//                 notFoundCounter++;
//               }
//               console.log('found ', foundCounter , ' not found ', notFoundCounter);
//             });
//           });
//         res.send('done');
// });


const createCsvWriter = require('csv-writer').createObjectCsvWriter;


// app.get('/p', function (req, res) {
//   var counter = 0;
//   Product.find({"product_code" : " " }, function (err, product) { 

//     const csvWriter = createCsvWriter({
//           path: path.resolve(__dirname, 'orders/productWithoutCodes.csv'),
//           header: [
//               {id: 'name', title: 'Name'},
//               {id: 'price', title: 'Price'},
//               {id: 'brand', title: 'Brand'}
//           ]
//       });
       
//        var records = [];
//        product.map(obj => {
//         records.push({name: obj.name, price: obj.price, brand: obj.brand});
//        });
//       csvWriter.writeRecords(records)      
//           .then(() => {
//               console.log('...Done');
//           });
//     console.log(err, product.length);
//     res.send('done');
//   })
// });

// app.get('/trim/p', function (req, res) {
//   Product.find({}, function (err, product) { 
//        product.map(obj => {
//         if(obj.product_code && obj.product_code !=" " && obj.product_code !="") {
//           obj.product_code = obj.product_code.trim();
//           obj.save(console.log('save'));          
//         }
//        });
//     res.send('done');
//   })
// });


function updateCode(product, callback) {
  Product.findOne({name: product.Name}, function (err, product) {
    callback(err, product);
  });
}


//import new products
// app.get('/import_products', function(req, res) {
//    const jsonFilePath=path.resolve(__dirname, 'orders/new-products.json');
//       var jsonObj = JSON.parse(fs.readFileSync(jsonFilePath, 'utf8'));
//       // console.log('jsonObj ', jsonObj.ADULT);
//           jsonObj.ADULT.map(product => {
//             // console.log('\n ==> ', product);
//             //insert prodcut
//             var newProduct = new Product({
//               name: product.Description,
//               slug: product.Description.replace(/\s+/g, '-').toLowerCase(),
//               desc: product.Description,
//               brand: "adult-sweets",
//               category: "adult-sweets",
//               price: parseFloat(product.Price),
//               image: product.Code + '.png',
//               instock: true,
//               vat: false,
//               product_code: product.Code,
//               featured: false,
//               warehouse: "adult-sweets",
//               weight_g: '',
//               weight_oz: ''
//             });
//             console.log('\n save it ==> ', newProduct , ' price ==> ', product.Price);
//             newProduct.save();
//           });

//     res.send('done');
// });

// var addAndRemoveImage = require("./service/addRemoveS3Image");
// var s3Bucket = bucket("sweet-product-images-new");

app.get('/upload_images', function(req, res) {
  // var productImage = req.files.image;
  // var imageFile = 
  // addAndRemoveImage(s3Bucket, "add", imageFile, productImage);
});

var productToUpdate = [
"475501",
"821283",
"821020",
"821011",
"821018",
"821017",
"821014",
"821015",
"821041",
"821012",
"821021",
"821719",
"595652",
"793110",
"793120",
"793250",
"295326",
"595547",
"380061",
"420103",
"420104",
"420610",
"420101",
"114520",
"728401",
"728600",
"728801",
"728201",
"728700",
"728001",
"728000",
"728100",
"363300",
"363411",
"363302",
"363405",
"595579",
"830280",
"380358",
"380354",
"380356",
"380396",
"380370",
"380377",
"380394",
"380355",
"380353",
"380351",
"380352",
"363021",
"363233",
"363011",
"363031",
"363071",
"363052",
"363151",
"363131",
"363191",
"584140",
"584160",
"584190",
"584170",
"466994",
"467320",
"467207",
"450061",
"450060",
"450388",
"450336",
"450335",
"450338",
"450070",
"450068",
"450094",
"450690",
"450604",
"450272",
"450212",
"450170",
"486951",
"450860",
"450230",
"486850",
"450988",
"450935",
"450197",
"450517",
"785226",
"785726",
"785426",
"785126",
"785626",
"785526",
"785326",
"875342",
"875974",
"875835",
"875344",
"875063",
"595140",
"466995",
"467752",
"467156",
"466996",
"467755",
"465356",
"467750",
"466993",
"466837",
"467855",
"467939",
"466108",
"467100",
"466105",
"467139",
"467751",
"466997",
"830357",
"830510",
"830020",
"595438",
"785289",
"785663",
"830336",
"595733",
"830801",
"830339",
"823207",
"823198",
"823214",
"823220",
"823231",
"823202",
"823171",
"823196",
"823194",
"340819",
"340824",
"340827",
"340829",
"475975",
"475973",
"595895",
"380155",
"876291",
"551703",
"552701",
"114365",
"114122",
"114221",
"501105",
"500142",
"500373",
"501043",
"500730",
"500506",
"500249",
"501517",
"501516",
"501200",
"501093",
"500920",
"501046",
"500376",
"500224",
"500160",
"479232",
"595867",
"500212",
"500451",
"501521",
"501522",
"500710",
"500211",
"500208",
"501041",
"500408",
"500397",
"595552",
"439736",
"219101",
"387480",
"450150",
"450997",
"450234",
"450998",
"450415",
"405232",
"405033",
"405598",
"405225",
"405700",
"405303",
"405337",
"405550",
"405222",
"405501",
"405800",
"405238",
"405902",
"405031",
"551730",
"450031",
"450503",
"450220",
"450462",
"450465",
"450417",
"450610",
"450460",
"450653",
"551474",
"551976",
"20639",
"550821",
"551996",
"551823",
"551986",
"551003",
"551983",
"551977",
"551585",
"551222",
"551982",
"551890",
"551144",
"551611",
"551265",
"551094",
"551179",
"551255",
"551480",
"551525",
"551713",
"486152",
"180965",
"450525",
"600081",
"600102",
"595580",
"450723",
"329048",
"329028",
"329054",
"450282",
"450466",
"450521",
"450301",
"450655",
"450261",
"450021",
"450171",
"450707",
"551706",
"551008",
"551412",
"551487",
"793730",
"551082",
"551278",
"245003",
"245001",
"245002",
"714125",
"714319",
"714675",
"714347",
"714616",
"543333",
"630847",
"630681",
"203275",
"450400",
"272498",
"272503",
"272501",
"272768",
"272502",
"272505",
"272035",
"272782",
"821712",
"821128",
"821705",
"821390",
"795409",
"795261",
"450317",
"131086",
"131083",
"131084",
"501508",
"135920",
"876342",
"135164",
"135587",
"875370",
"875371",
"876868",
"875737",
"876337",
"875026",
"875034",
"543298",
"543533",
"543593",
"543104",
"543304",
"543704",
"543037",
"543321",
"543754",
"71876",
"71943",
"73543",
"73515",
"72609",
"73541",
"71562",
"73547",
"73413",
"72020",
"590039",
"76510",
"73512",
"73513",
"73510",
"73511",
"75510",
"75512",
"19983",
"12536",
"996153",
"444347",
"19988",
"19989",
"987168",
"12963",
"987984",
"19984",
"642669",
"642662",
"642661",
"642664",
"642671",
"642648",
"642672",
"642582",
"642649",
"642665",
"642658",
"642670",
"177647",
]
//update ware houses for products
// app.get('/stock/update', function (req, res) {
//       // const jsonFilePath=path.resolve(__dirname, 'orders/Bizzcandy-Stock/BizzcandyOrderForm11thJuly2019.json');
//       // var jsonObj = JSON.parse(fs.readFileSync(jsonFilePath, 'utf8'));
//       // console.log('jsonObj ', jsonObj);
//       Product.update({product_code: {$in:productToUpdate}}, { $set:{ "instock" : true } }, { multi : true } ).exec(function() {
//         console.log('all updated');
//       });

//       //for stock false
//       // Product.update({warehouse: "american-candy"}, { $set:{ "instock" : false } }, { multi : true } ).exec(function() {
//       //   console.log('all updated');
//       // });

//       // var foundCounter = 0;
//       //     jsonObj.map(product => {
//       //       // console.log('\n ==> ', product.CODE);
//       //       // Product.findOne({product_code: product.CODE}, function (err, found) {
//       //       Product.update({product_code: product.CODE}, {$set:{ "instock" : true }}, function (err, found) {
//       //         if(found && found != null) {
//       //           foundCounter++;
//       //           console.log('found for ', found.product_code);
//       //           console.log('foundCounter ', foundCounter);
//       //         }
//       //       });
//       //     });

//     res.send('done');
// });

var productsToLink = [
"FD23",
"FD235",
"FD29",
"FD76",
"FD97",
"CN03",
"CN09",
"CN11",
"CN12",
"CN58",
"CN120",
"HP2717",
"HP2809",
"HP3043",
"ST04",
"FD01",
"FD107",
"FD126",
"FD179",
"FD02",
"FD211",
"FD212",
"FD217",
"FD240",
"FD37",
"FD98",
"HP3044D",
"HP3256",
"ST32",
"ST62",
"FD269",
"FD59",
"HP2161D",
"HP3216D",
"HP3235",
"HP3236",
"FD105",
"FD11",
"FD111",
"FD12",
"FD13",
"FD15",
"FD159",
"FD16",
"FD17",
"FD237",
"FD66",
"FD73",
"FD74",
"FD92",
"FD93",
"ST32",
"ST33",
"CN13",
"FD106",
"FD14",
"FD20",
"FD21",
"FD30",
"GP04",
"GP05",
"GP06",
"GP07",
"GP08",
"475501",
"821283",
"821020",
"821011",
"821018",
"821017",
"821014",
"821015",
"821041",
"821012",
"821021",
"821719",
"595652",
"793110",
"793120",
"793250",
"295326",
"595547",
"380061",
"420103",
"420104",
"420610",
"420101",
"114520",
"728401",
"728600",
"728801",
"728201",
"728700",
"728001",
"728000",
"728100",
"363300",
"363411",
"363302",
"363405",
"595579",
"830280",
"380358",
"380354",
"380356",
"380396",
"380370",
"380377",
"380394",
"380355",
"380353",
"380351",
"380352",
"363021",
"363051",
"363233",
"363011",
"363031",
"363071",
"363052",
"363151",
"363131",
"363191",
"584140",
"584160",
"584190",
"584170",
"584150",
"466994",
"467320",
"467207",
"450061",
"450060",
"450388",
"450336",
"450335",
"450338",
"450070",
"450068",
"450094",
"450690",
"450604",
"450272",
"450212",
"450170",
"486951",
"450860",
"450230",
"486850",
"450988",
"450935",
"450197",
"450517",
"450280",
"785226",
"785726",
"785426",
"785126",
"785626",
"785526",
"785326",
"875342",
"875974",
"875835",
"875344",
"875063",
"595140",
"466995",
"467752",
"467156",
"466996",
"467755",
"465356",
"467750",
"466993",
"466837",
"467855",
"467939",
"467940",
"466108",
"466109",
"467100",
"466105",
"467170",
"467139",
"467751",
"466997",
"830380",
"830357",
"830440",
"830510",
"830020",
"595438",
"785289",
"785663",
"830336",
"595733",
"830801",
"830339",
"823207",
"823198",
"823214",
"823220",
"823231",
"823202",
"823171",
"823196",
"823194",
"340819",
"340824",
"340827",
"340829",
"475975",
"475972",
"475973",
"595895",
"380155",
"876291",
"551703",
"552701",
"114365",
"114504",
"114122",
"114221",
"501105",
"500142",
"500373",
"501043",
"500730",
"500247",
"500506",
"500249",
"501517",
"501516",
"500161",
"501200",
"501093",
"500920",
"501046",
"500376",
"500224",
"500160",
"479232",
"595867",
"500212",
"500451",
"501521",
"501522",
"500710",
"500211",
"500208",
"501041",
"500408",
"500397",
"595552",
"439736",
"219101",
"387480",
"450150",
"450997",
"450234",
"450998",
"450415",
"405232",
"405033",
"405598",
"405225",
"405008",
"405810",
"405700",
"405303",
"405337",
"405550",
"405222",
"405501",
"405006",
"405800",
"405238",
"405902",
"405031",
"551730",
"450031",
"450503",
"450220",
"450462",
"450465",
"450417",
"450610",
"450460",
"450169",
"450653",
"551474",
"551976",
"20639",
"550821",
"551996",
"551823",
"551986",
"551003",
"551227",
"551574",
"551983",
"551977",
"551585",
"551222",
"551982",
"551890",
"551144",
"550744",
"551611",
"551021",
"551265",
"551094",
"551179",
"551255",
"551480",
"551525",
"551713",
"486152",
"180965",
"450525",
"600081",
"600102",
"595580",
"450723",
"329048",
"329028",
"329054",
"450282",
"450466",
"450521",
"450301",
"450655",
"450261",
"450021",
"450853",
"450171",
"450707",
"551706",
"551008",
"551412",
"551487",
"793730",
"551082",
"551106",
"551278",
"245003",
"245001",
"245002",
"714548",
"714125",
"714319",
"714675",
"714347",
"714616",
"714517",
"543333",
"630847",
"630681",
"203275",
"450400",
"272498",
"272503",
"272501",
"272742",
"272768",
"272502",
"272505",
"272035",
"272782",
"821712",
"821128",
"821705",
"821390",
"795409",
"795261",
"450317",
"131086",
"131083",
"131084",
"501508",
"135920",
"876582",
"876342",
"135164",
"135587",
"875370",
"875371",
"876868",
"875737",
"876337",
"875026",
"875034",
"12464",
"28930",
"402435",
"543298",
"543533",
"543593",
"543104",
"543304",
"543704",
"543037",
"543321",
"543754",
"71876",
"71943",
"73543",
"73515",
"72609",
"73541",
"71562",
"71952",
"73547",
"73413",
"72020",
"590039",
"73512",
"73513",
"73510",
"73511",
"75510",
"996153",
"987168",
"987984",
"642659",
"642669",
"642662",
"642661",
"642667",
"642664",
"642671",
"642648",
"642672",
"642660",
"642582",
"642649",
"642665",
"642658",
"642670",
"642663",
"642666",
"177647",
"42374",
"42375",
"42376",
"42377",
"42378",
"42379",
"42312",
"42310",
"42311",
"42313",
"42314",
"42316",
"42317",
"42318",
"79060",
"79059",
"79041",
"79774",
"79775",
"79776",
"79777",
"72185",
"72186",
"72187",
"72188",
"74750",
"74751",
"74753",
"74784",
"74801",
"32774",
"32775",
"32776",
"32780",
"62254",
"62256",
"62257",
"62258",
"62259",
"86131",
"86132",
"86136",
"72223",
"62245",
"33900",
"62237",
"72189",
"21132",
"83170",
"91224",
"42501",
"79903",
"42470",
"74736",
"86117",
"62283",
"79900",
"42415",
"62284",
"64743",
"64158",
"66260",
"42387",
"42386",
"79048",
"74728",
"66372",
"66375",
"66373",
"66371",
"66370",
"5225",
"66265",
"42500",
"73320",
"79781",
"74726",
"5226",
"5226",
"5226",
"5226",
"79000",
"79002",
"79006",
"79001",
"AB70906",
"AB70905",
"AB70915",
"AB70916",
"AB70925",
"AB70922",
"AB70930",
"AB70933",
"AB70902",
"AB70903",
"AB70904",
"AB70914",
"AB70911",
"AB70910",
"PEPPA1",
"PEEPA2",
"0CC056",
"0CC050",
"0CC055",
"0CC054",
"0CC061",
"LOAC10491",
"LOAC10493",
"LOAC10496",
"LOAC13540",
"LOAC1078",
"LOAC1079",
"LOAC1080",
"LOAC13510",
"LOAC107310",
"LOAC107340",
"LOAC107360",
"LOAC13520",
"LOAC1081",
"LOAC13570",
"10390",
"10392",
"10397",
"10398",
"LOAC1086",
];


// app.get('/linkwithwh', function (req, res) {
//     // Product.find({product_code: {$in:productsToLink}}).exec(function(err, prds) {
//       Product.update({product_code: {$in:productsToLink}}, { $set:{"category": "", "brand": "american-soda", "warehouse": "american-candy"}}, { multi : true } ).exec(function(err,done) {
//         console.log('all updated ', err, done);
//       });

//     res.send('done');
// });

app.get('/check_db', function (req, res) {
    // Product.find({product_code: {$in:productsToLink}}).exec(function(err, prds) {
      Product.find({product_code: {$in:productsToLink}} ).exec(function(err,products) {
        console.log('total found ', products.length);
          products.map(product => {
            console.log(product.product_code);
          });
      });

    res.send('done');
});
// Start the server
const port = process.env.PORT || 9000;
app.listen(port, function () {
    console.log(`Server started on port ${port}`);
});

String.prototype.toLowerCase = function(){
  return this.split('').map(function(c){
     var cc = c.charCodeAt(0);
     if (cc > 64 && cc < 91) {
        return String.fromCharCode(cc + 32);
     }
     return c;
  }).join('');
}